1)Getting Started
  1.1) Audience
  1.2) Libraries we used
  1.3) Map Options
	  
2) Get API KEY

3) Adding a Google Map with a Marker

4) Geolocation

5)Connect Firebase

1)Getting Started:

	1.1)Audience:

		This documentation is designed for people familiar with ReactJs programming concepts. 
		You should also be familiar with Google Maps from a user's point of view.
		
	1.2)Libraries:
		
		1.2.1) We used GoogleMapReact library to display the map.
		
		1.2.2) We used Geolocated library to get the geolocation.
		
		1.2.3) We used react-places-autocomplete to autocomplete the searched places.
	
	   These steps are explained below.

	
		1.2.1) GoogleMapReact library:
			
			installation:
			
				npm install --save google-map-react
				
			This library used for displaying the map.By passing the api key we can get the map by using this library.For more details open the
			link https://github.com/istarkov/google-map-react.
		
		1.2.2) Geolocated
		
			installation:
			
				npm install -save geolocated
			
			This library is used to locate the user's current location in the map.
		
		
		1.2.3)react-places-autocomplete
		
			installation:
				
				npm install --save react-places-autocomplete
				
			This library is used to autocomlete the search bar in mapFor more details open the
			link https://github.com/kenny-hibino/react-places-autocomplete.
	
	1.3)Map Options:
		
		There are two required options for every map: center and zoom.
		
				
				constructor(props){
					this.state={
						center:{lat: 17.7417216, lng: 83.3009082},
						zoom: 8
					}
				}
				
				<GoogleMapReact
				
					bootstrapURLKeys={{
						 key: YOUR_API_KEY
					}}
					 center={[this.state.lat, this.state.lng]}
					 defaultZoom={this.state.zoom}
				>
				</GoogleMapReact> 
				
				
		Zoom Levels:
		
			The initial resolution at which to display the map is set by the zoom property, where zoom 0 corresponds to a map of the
			Earth fully zoomed out, and larger zoom levels zoom in at a higher resolution. Specify zoom level as an integer.
				
				zoom: 8
			
			Offering a map of the entire Earth as a single image would either require an immense map, or a small map with very low 
			resolution. As a result, map images within Google Maps and the Maps JavaScript API are broken up into map "tiles" and 
			 "zoom levels." At low zoom levels, a small set of map tiles covers a wide area; at higher zoom levels, the tiles are of higher
			resolution and cover a smaller area. The following list shows the approximate level of detail you can expect to see at each 
			zoom level:
			
			
				1: World
				5: Landmass/continent
				10: City
				15: Streets
				20: Buildings
				
				
				
2)GET API KEY:-

	Step 1:Get an API Key from the Google API Console

		To get an API Key just go to developers.google.com
		
		Follow these steps to get an API key:
		
			1.Go to the Google API Console.
			2.Create or select a project.
			3.Click Continue to enable the API and any related services.
			4.On the Credentials page, get an API key.
			Note: If you have an existing unrestricted API key, or a key with browser restrictions, you may use that key.
			5.From the dialog displaying the API key, select Restrict key to set a browser restriction on the API key.
			6.In the Key restriction section, select HTTP referrers (web sites), then follow the on-screen instructions to set referrers.
			7.(Optional) Enable billing. See Usage Limits for more information.
		
		In the Google API Console, you can also look up an existing key or view a list of enabled APIs.

		For more information on using the Google API Console, see API Console Help.

	Step 2:Add the API key to your application

		When loading the Google Maps JavaScript API, substitute YOUR_API_KEY 
		in the code below with the API key you got from the previous step. 

			<script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY"
			  type="text/javascript"></script>


3)Adding a Google Map with a Marker:-

	<GoogleMapReact
				
		bootstrapURLKeys={{
			 key: YOUR_API_KEY
		}}
		 center={[this.state.lat, this.state.lng]}
		 defaultZoom={this.state.zoom}
	>
		<Marker
			 lat={this.state.lat}
			 lng={this.state.lng}
			 text={"C"}
			 /> 
			 
	</GoogleMapReact> 
	
	In the code google map react will provide the map by taking the api key as a parameter.and the map is centered at center.center is the 
	option in which we pass the lat and lng of the position where we have to load the map.zoom is the another required option for map.
	
	
4)Geolocation: Displaying User or Device Position on Maps:

	We can use the Geolocation feature to display the geographic location of a user or device on a Google map.
	
	The sample below shows the entire code you need to identify your present location.
	
	
		 if(this.props.isGeolocationAvailable){
            if(this.props.isGeolocationEnabled){
                if(this.props.coords){
                    console.log(this.props.coords.latitude);
                    console.log(this.props.coords.longitude);
                    this.setState({
                        lat: this.props.coords.latitude,
                        lng: this.props.coords.longitude
                    });
                    console.log("lat&lng are changed...", this.state.lat, this.state.lng);
                }
                else{
                    console.log("props coords is not find.");
                }
            }
            else{
                console.log("geolocation is not enabled");
            }
        }
        else{
			console.log("geolocation is not available");
        }
        
     What is Geolocation?
		
		Geolocation refers to the identification of the geographic location of a user or computing device via a variety of data 
		collection mechanisms. Typically, most geolocation services use network routing addresses or internal GPS devices to 
		determine this location. Geolocation is a device-specific API. This means that browsers or devices must support geolocation
		in order to use it through web applications.
	
5. connect to the firebase:
	
		To add Firebase to your app, you'll need a Firebase project, the Firebase SDK, and a short snippet of initialization
		code that has a few details about your project.
		
		/*firebase sdk*/
		
		The Firebase SDK is also available on npm. If you don't already have a package.json file, create one via npm init. Next, 
		install the firebase npm package and save it to your package.json:
		
			$ npm install firebase --save
		
		you can import the module:
		
			import * as firebase from "firebase";

		
    1.Create a Firebase project in the Firebase console, if you don't already have one.
        1.1)If you already have an existing Google project associated with your app, click Import Google Project. Otherwise, 
			click Create New Project.
        1.2)If you already have a Firebase project, click Add App from the project overview page.
    2.Click Add Firebase to your web app.
    3.Note the initialization code snippet, which you will use in a minute.
    
    
    Copy, then paste the code snippet into your index.js file. The code snippet should look like this:
    
    var config = {
	  apiKey: "<API_KEY>",
	  authDomain: "<PROJECT_ID>.firebaseapp.com",
	  databaseURL: "https://<DATABASE_NAME>.firebaseio.com",
	  storageBucket: "<BUCKET>.appspot.com",
	};
	firebase.initializeApp(config)
	
	The snippet contains initialization information to configure the Firebase JavaScript SDK to use Authentication, Cloud Storage and 
	the Realtime Database. You can reduce the amount of code your app uses by just including the features you need. The individually 
	installable components are:

	1.firebase-app - The core firebase client (required).
    2.firebase-auth - Firebase Authentication (optional).
    3.firebase-database - The Firebase Realtime Database (optional).
    4.firebase-storage - Cloud Storage (optional).
    5.firebase-messaging - Firebase Cloud Messaging (optional).
    
    
    Use Firebase services:-

	A Firebase App can use multiple Firebase services. Each service can be accessed from the firebase namespace:

		firebase.auth() - Authentication
		firebase.storage() - Cloud Storage
		firebase.database() - Realtime Database
    

